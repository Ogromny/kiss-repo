diff --git a/config.def.h b/config.def.h
index 190b0da..d9a1715 100644
--- a/config.def.h
+++ b/config.def.h
@@ -73,6 +73,8 @@ static const Key keys[] = {
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
 	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
 	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
+   { MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_J,          movestack,      {.i = +1} },
+   { MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_K,          movestack,      {.i = -1} },
 	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
 	{ MODKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },
 	{ MODKEY,                    XKB_KEY_h,          setmfact,       {.f = -0.05} },
diff --git a/dwl.c b/dwl.c
index b09fc6f..ccfd412 100644
--- a/dwl.c
+++ b/dwl.c
@@ -245,6 +245,7 @@ static void killclient(const Arg *arg);
 static void maplayersurfacenotify(struct wl_listener *listener, void *data);
 static void mapnotify(struct wl_listener *listener, void *data);
 static void monocle(Monitor *m);
+static void movestack(Arg const *arg);
 static void motionabsolute(struct wl_listener *listener, void *data);
 static void motionnotify(uint32_t time);
 static void motionrelative(struct wl_listener *listener, void *data);
@@ -1391,6 +1392,32 @@ monocle(Monitor *m)
 	}
 }
 
+static void movestack(Arg const *arg) {
+    Client *c, *sel = selclient();
+
+    if (wl_list_length(&clients) <= 1)
+        return;
+
+    if (arg->i > 0) {
+        wl_list_for_each(c, &sel->link, link) {
+            /* Found it */
+            if (VISIBLEON(c, selmon) || &c->link == &clients)
+                break;
+        }
+    } else {
+        wl_list_for_each_reverse(c, &sel->link, link) {
+            if (VISIBLEON(c, selmon) || &c->link == &clients)
+                break;
+        }
+        /* backup one client */
+        c = wl_container_of(c->link.prev, c, link);
+    }
+
+    wl_list_remove(&sel->link);
+    wl_list_insert(&c->link, &sel->link);
+    arrange(selmon);
+}
+
 void
 motionabsolute(struct wl_listener *listener, void *data)
 {
