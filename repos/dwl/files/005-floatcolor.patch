diff --git a/config.def.h b/config.def.h
index 190b0da..4caa832 100644
--- a/config.def.h
+++ b/config.def.h
@@ -3,6 +3,7 @@ static const int sloppyfocus        = 1;  /* focus follows mouse */
 static const unsigned int borderpx  = 1;  /* border pixel of windows */
 static const int lockfullscreen     = 1;  /* 1 will force focus on the fullscreen window */
 static const float rootcolor[]      = {0.3, 0.3, 0.3, 1.0};
+static float const floatcolor[]     = {1.0, 1.0, 0.0, 1.0};
 static const float bordercolor[]    = {0.5, 0.5, 0.5, 1.0};
 static const float focuscolor[]     = {1.0, 0.0, 0.0, 1.0};
 
diff --git a/dwl.c b/dwl.c
index b09fc6f..c6dd193 100644
--- a/dwl.c
+++ b/dwl.c
@@ -659,6 +659,7 @@ buttonpress(struct wl_listener *listener, void *data)
 			/* Drop the window off on its new monitor */
 			selmon = xytomon(cursor->x, cursor->y);
 			setmon(grabc, selmon, 0);
+            grabc = NULL;
 			return;
 		}
 		break;
@@ -1079,6 +1080,7 @@ focusclient(Client *c, int lift)
 	struct wlr_surface *old = seat->keyboard_state.focused_surface;
 	struct wlr_keyboard *kb;
 	int i;
+    float const *color = NULL;
 
 	/* Raise client in stacking order if requested */
 	if (c && lift)
@@ -1094,8 +1096,9 @@ focusclient(Client *c, int lift)
 		selmon = c->mon;
 		c->isurgent = 0;
 
+        color = (c->isfloating != 0 ? floatcolor : focuscolor);
 		for (i = 0; i < 4; i++)
-			wlr_scene_rect_set_color(c->border[i], focuscolor);
+			wlr_scene_rect_set_color(c->border[i], color);
 	}
 
 	/* Deactivate old client if focus is changing */
@@ -1117,9 +1120,11 @@ focusclient(Client *c, int lift)
 		} else {
 			Client *w;
 			struct wlr_scene_node *node = old->data;
-			if ((w = node->data))
+			if ((w = node->data)) {
+                color = (w->isfloating != 0 ? floatcolor : bordercolor);
 				for (i = 0; i < 4; i++)
-					wlr_scene_rect_set_color(w->border[i], bordercolor);
+					wlr_scene_rect_set_color(w->border[i], color);
+            }
 
 			client_activate_surface(old, 0);
 		}
@@ -1799,6 +1804,12 @@ setfloating(Client *c, int floating)
 {
 	c->isfloating = floating;
 	wlr_scene_node_reparent(c->scene, layers[c->isfloating ? LyrFloat : LyrTile]);
+    if (grabc == NULL && floating != 0) {
+        for (int i = 0; i < 4; ++i) {
+            wlr_scene_rect_set_color(c->border[i], floatcolor);
+            wlr_scene_node_lower_to_bottom(&c->border[i]->node);
+        }
+    }
 	arrange(c->mon);
 	printstatus();
 }
