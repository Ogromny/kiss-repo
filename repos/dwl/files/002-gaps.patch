Custom gaps

diff --git a/config.def.h b/config.def.h
index 190b0da..c2ef031 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,6 +5,7 @@ static const int lockfullscreen     = 1;  /* 1 will force focus on the fullscree
 static const float rootcolor[]      = {0.3, 0.3, 0.3, 1.0};
 static const float bordercolor[]    = {0.5, 0.5, 0.5, 1.0};
 static const float focuscolor[]     = {1.0, 0.0, 0.0, 1.0};
+static const unsigned int gapv      = 10;
 
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
diff --git a/dwl.c b/dwl.c
index b09fc6f..8dc47de 100644
--- a/dwl.c
+++ b/dwl.c
@@ -178,6 +178,7 @@ struct Monitor {
 	unsigned int seltags;
 	unsigned int sellt;
 	unsigned int tagset[2];
+   unsigned int gapv; /* gap value */
 	double mfact;
 	int nmaster;
 	int un_map; /* If a map/unmap happened on this monitor, then this should be true */
@@ -871,6 +872,7 @@ createmon(struct wl_listener *listener, void *data)
 	const MonitorRule *r;
 	Monitor *m = wlr_output->data = ecalloc(1, sizeof(*m));
 	m->wlr_output = wlr_output;
+   m->gapv = gapv;
 
 	wlr_output_init_render(wlr_output, alloc, drw);
 
@@ -2130,6 +2132,7 @@ void
 tile(Monitor *m)
 {
 	unsigned int i, n = 0, h, mw, my, ty;
+   unsigned int r;
 	Client *c;
 
 	wl_list_for_each(c, &clients, link)
@@ -2139,21 +2142,25 @@ tile(Monitor *m)
 		return;
 
 	if (n > m->nmaster)
-		mw = m->nmaster ? m->w.width * m->mfact : 0;
+       mw = m->nmaster ? (m->w.width + m->gapv) * m->mfact : 0;
 	else
+       mw = m->w.width - 2 * m->gapv + m->gapv;
 		mw = m->w.width;
-	i = my = ty = 0;
+	i = 0;
+   my = ty = m->gapv;
 	wl_list_for_each(c, &clients, link) {
 		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
 			continue;
 		if (i < m->nmaster) {
-			h = (m->w.height - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->w.x, m->w.y + my, mw, h, 0);
-			my += c->geom.height;
+           r = MIN(n, m->nmaster) - i;
+ 			h = (m->w.height - my - m->gapv - m->gapv * (r - 1)) / r;
+ 			resize(c, m->w.x + m->gapv, m->w.y + my, mw - m->gapv, h, 0);
+ 			my += c->geom.height + m->gapv;
 		} else {
-			h = (m->w.height - ty) / (n - i);
-			resize(c, m->w.x + mw, m->w.y + ty, m->w.width - mw, h, 0);
-			ty += c->geom.height;
+ 			r = n - i;
+ 			h = (m->w.height - ty - m->gapv - m->gapv * (r - 1)) / r;
+ 			resize(c, m->w.x + mw + m->gapv, m->w.y + ty, m->w.width - mw - 2 * m->gapv, h, 0);
+ 			ty += c->geom.height + m->gapv;
 		}
 		i++;
 	}
